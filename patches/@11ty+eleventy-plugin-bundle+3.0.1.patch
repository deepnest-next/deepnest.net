diff --git a/node_modules/@11ty/eleventy-plugin-bundle/.editorconfig b/node_modules/@11ty/eleventy-plugin-bundle/.editorconfig
new file mode 100755
index 0000000..3b325a5
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/.editorconfig
@@ -0,0 +1,16 @@
+root = true
+
+[*]
+indent_style = tab
+indent_size = 2
+end_of_line = lf
+insert_final_newline = false
+trim_trailing_whitespace = true
+charset = utf-8
+
+[*.js]
+insert_final_newline = true
+
+[/test/stubs*/**]
+insert_final_newline = unset
+trim_trailing_whitespace = false
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/.github/workflows/ci.yml b/node_modules/@11ty/eleventy-plugin-bundle/.github/workflows/ci.yml
new file mode 100755
index 0000000..8d0faf2
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/.github/workflows/ci.yml
@@ -0,0 +1,22 @@
+name: Node Unit Tests
+on: [push, pull_request]
+permissions: read-all
+jobs:
+  build:
+    runs-on: ${{ matrix.os }}
+    strategy:
+      matrix:
+        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
+        node: ["18", "20", "22"]
+    name: Node.js ${{ matrix.node }} on ${{ matrix.os }}
+    steps:
+      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # 4.1.7
+      - name: Setup node
+        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # 4.0.3
+        with:
+          node-version: ${{ matrix.node }}
+          # cache: npm
+      - run: npm install
+      - run: npm test
+env:
+  YARN_GPG: no
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/.github/workflows/release.yml b/node_modules/@11ty/eleventy-plugin-bundle/.github/workflows/release.yml
new file mode 100755
index 0000000..b5cd389
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/.github/workflows/release.yml
@@ -0,0 +1,24 @@
+name: Publish Release to npm
+on:
+  release:
+    types: [published]
+permissions: read-all
+jobs:
+  build:
+    runs-on: ubuntu-latest
+    permissions:
+      contents: read
+      id-token: write
+    steps:
+      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # 4.1.7
+      - uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # 4.0.3
+        with:
+          node-version: "20"
+          registry-url: 'https://registry.npmjs.org'
+      - run: npm install
+      - run: npm test
+      - if: ${{ github.event.release.tag_name != '' && env.NPM_PUBLISH_TAG != '' }}
+        run: npm publish --provenance --access=public --tag=${{ env.NPM_PUBLISH_TAG }}
+        env:
+          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
+          NPM_PUBLISH_TAG: ${{ contains(github.event.release.tag_name, '-beta.') && 'beta' || 'latest' }}
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/.gitignore b/node_modules/@11ty/eleventy-plugin-bundle/.gitignore
new file mode 100755
index 0000000..e0aa31f
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/.gitignore
@@ -0,0 +1,4 @@
+node_modules
+_site
+**/_site
+package-lock.json
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/.npmignore b/node_modules/@11ty/eleventy-plugin-bundle/.npmignore
new file mode 100755
index 0000000..6af2959
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/.npmignore
@@ -0,0 +1,4 @@
+test
+_site
+sample
+.*
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/README.md b/node_modules/@11ty/eleventy-plugin-bundle/README.md
old mode 100644
new mode 100755
index a585831..6cc9ab6
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/eleventy.bundle.js b/node_modules/@11ty/eleventy-plugin-bundle/eleventy.bundle.js
old mode 100644
new mode 100755
index da47e6c..f828003
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/sample/sample-config.js b/node_modules/@11ty/eleventy-plugin-bundle/sample/sample-config.js
new file mode 100755
index 0000000..feaab26
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/sample/sample-config.js
@@ -0,0 +1,33 @@
+import bundlePlugin from "../eleventy.bundle.js";
+
+export default function(eleventyConfig) {
+	// This call is what Eleventy will do in the default config in 3.0.0-alpha.10
+	eleventyConfig.addPlugin(bundlePlugin, {
+		bundles: false,
+		immediate: true
+	});
+
+	// adds html, css, js (maintain existing API)
+	eleventyConfig.addPlugin(bundlePlugin, {
+		toFileDirectory: "bundle1"
+	});
+
+	eleventyConfig.addPlugin(eleventyConfig => {
+		// ignored, already exists
+		eleventyConfig.addBundle("css");
+		// ignored, already exists
+		eleventyConfig.addBundle("css");
+		// ignored, already exists
+		eleventyConfig.addBundle("css");
+		// ignored, already exists
+		eleventyConfig.addBundle("html");
+	});
+
+	// new!
+	eleventyConfig.addBundle("stylesheet", {
+		outputFileExtension: "css",
+		shortcodeName: "stylesheet",
+		transforms: [],
+		// hoist: true,
+	});
+};
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/sample/test.njk b/node_modules/@11ty/eleventy-plugin-bundle/sample/test.njk
new file mode 100755
index 0000000..e063341
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/sample/test.njk
@@ -0,0 +1,27 @@
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: blue; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: red; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+{%- stylesheet %}/* lololololol sdlkfjkdlsfsldkjflksd sdlfkj */{% endstylesheet %}
+
+<svg width="0" height="0" aria-hidden="true" style="position: absolute;">
+	<defs>{%- getBundle "html", "svg" %}</defs>
+</svg>
+
+<!-- And anywhere on your page you can add icons to the set -->
+{% html "svg" %}
+<g id="icon-close">
+	<path d="M8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 Z M10.44352,10.7233105 L10.4528296,10.7326201 L10.7326201,10.4528296 C11.0310632,10.1543865 11.0314986,9.66985171 10.7335912,9.37194437 L9.36507937,8.0034325 L10.7360526,6.63245928 C11.0344957,6.33401613 11.0349311,5.84948135 10.7370237,5.55157401 L10.448426,5.26297627 C10.1505186,4.96506892 9.66598387,4.96550426 9.36754072,5.26394741 L8.00589385,6.62559428 L6.63738198,5.25708241 C6.33947464,4.95917507 5.85493986,4.95961041 5.55649671,5.25805356 L5.26737991,5.54717036 C4.96893676,5.84561351 4.96850142,6.33014829 5.26640876,6.62805563 L6.62561103,7.9872579 L5.25463781,9.35823112 C4.95619466,9.65667427 4.95575932,10.141209 5.25366666,10.4391164 L5.5422644,10.7277141 C5.84017175,11.0256215 6.32470652,11.0251861 6.62314967,10.726743 L7.99412289,9.35576976 L9.36263476,10.7242816 C9.66054211,11.022189 10.1450769,11.0217536 10.44352,10.7233105 Z" />
+</g>
+{% endhtml %}
+
+And now you can use `icon-close` in as many SVG instances as you’d like (without repeating the heftier SVG content).
+
+<svg><use xlink:href="#icon-close"></use></svg>
+<svg><use xlink:href="#icon-close"></use></svg>
+<svg><use xlink:href="#icon-close"></use></svg>
+<svg><use xlink:href="#icon-close"></use></svg>
+<style>{% getBundle "stylesheet" %}</style>
+{# <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/src/BundleFileOutput.js b/node_modules/@11ty/eleventy-plugin-bundle/src/BundleFileOutput.js
old mode 100644
new mode 100755
index 66fc929..ab5f976
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/src/CodeManager.js b/node_modules/@11ty/eleventy-plugin-bundle/src/CodeManager.js
old mode 100644
new mode 100755
index 50f650d..f0f5840
--- a/node_modules/@11ty/eleventy-plugin-bundle/src/CodeManager.js
+++ b/node_modules/@11ty/eleventy-plugin-bundle/src/CodeManager.js
@@ -115,6 +115,41 @@ class CodeManager {
 		}
 	}
 	
+	appendToPage(pageUrl, code = [], bucket) {
+		if (!Array.isArray(code) && code) {
+		  code = [code];
+		}
+		if (code.length === 0) {
+		  return;
+		}
+	
+		if (!this.pages[pageUrl]) {
+		  this.pages[pageUrl] = {};
+		}
+	
+		let buckets = CodeManager.normalizeBuckets(bucket);
+	
+		let codeContent = code.map(entry => {
+		  if (this.trimOnAdd) {
+			return entry.trim();
+		  }
+		  return entry;
+		});
+	
+		for (let b of buckets) {
+		  this._initBucket(pageUrl, b);
+	
+		  for (let content of codeContent) {
+			if (content) {
+			  if (!this.pages[pageUrl][b].has(content)) {
+				debug("Appending code to bundle %o for %o (bucket: %o, size: %o): %o", this.name, pageUrl, b, content.length, content.length > DEBUG_LOG_TRUNCATION_SIZE ? content.slice(0, DEBUG_LOG_TRUNCATION_SIZE) + "…" : content);
+				this.pages[pageUrl][b].add(content);
+			  }
+			}
+		  }
+		}
+	  }
+
 	async runTransforms(str, pageData, buckets) {
 		for (let callback of this.transforms) {
 			str = await callback.call(
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/src/OutOfOrderRender.js b/node_modules/@11ty/eleventy-plugin-bundle/src/OutOfOrderRender.js
old mode 100644
new mode 100755
index 6cafa49..41b2602
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/src/eleventy.bundleManagers.js b/node_modules/@11ty/eleventy-plugin-bundle/src/eleventy.bundleManagers.js
old mode 100644
new mode 100755
index 98b4da6..f24c67b
--- a/node_modules/@11ty/eleventy-plugin-bundle/src/eleventy.bundleManagers.js
+++ b/node_modules/@11ty/eleventy-plugin-bundle/src/eleventy.bundleManagers.js
@@ -61,6 +61,15 @@ function eleventyBundleManagers(eleventyConfig, pluginOptions = {}) {
 				}
 				return "";
 			});
+	
+			// Add append shortcode
+			eleventyConfig.addPairedShortcode(`${shortcodeName}Append`, function appendContent(content, bucket, explicitUrl) {
+				let url = explicitUrl || this.page?.url;
+				if (url) { // don’t add if a file doesn’t have an output URL
+				managers[name].appendToPage(url, content, bucket);
+				}
+				return "";
+			});
 		}
 	};
 
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/src/eleventy.pruneEmptyBundles.js b/node_modules/@11ty/eleventy-plugin-bundle/src/eleventy.pruneEmptyBundles.js
old mode 100644
new mode 100755
index 3bcaa72..7e28ee8
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/src/eleventy.shortcodes.js b/node_modules/@11ty/eleventy-plugin-bundle/src/eleventy.shortcodes.js
old mode 100644
new mode 100755
index 6bb8843..08399c7
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs-virtual/.gitkeep b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs-virtual/.gitkeep
new file mode 100755
index 0000000..e69de29
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/buckets-get-multiple-comma-sep/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/buckets-get-multiple-comma-sep/index.liquid
new file mode 100755
index 0000000..14bd298
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/buckets-get-multiple-comma-sep/index.liquid
@@ -0,0 +1,5 @@
+{%- css "defer" %}* { color: blue; }{% endcss %}
+{%- css %}* { color: blue; }{% endcss %}
+{%- css "defer" %}* { color: red; }{% endcss %}
+{%- css %}* { color: orange; }{% endcss -%}
+<style>{% getBundle "css", "default,defer" %}</style>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/buckets-get-multiple/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/buckets-get-multiple/index.liquid
new file mode 100755
index 0000000..5480527
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/buckets-get-multiple/index.liquid
@@ -0,0 +1,10 @@
+---
+buckets:
+  - default
+  - defer
+---
+{%- css "defer" %}* { color: blue; }{% endcss %}
+{%- css %}* { color: blue; }{% endcss %}
+{%- css "defer" %}* { color: red; }{% endcss %}
+{%- css %}* { color: orange; }{% endcss -%}
+<style>{% getBundle "css", buckets %}</style>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/buckets-ordering/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/buckets-ordering/index.liquid
new file mode 100755
index 0000000..118fd0f
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/buckets-ordering/index.liquid
@@ -0,0 +1,10 @@
+---
+buckets:
+  - defer
+  - default
+---
+{%- css "defer" %}* { color: blue; }{% endcss %}
+{%- css %}* { color: blue; }{% endcss %}
+{%- css "defer" %}* { color: red; }{% endcss %}
+{%- css %}* { color: orange; }{% endcss -%}
+<style>{% getBundle "css", buckets %}</style>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/bundle-in-layout/_includes/layout.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/bundle-in-layout/_includes/layout.liquid
new file mode 100755
index 0000000..a8f513a
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/bundle-in-layout/_includes/layout.liquid
@@ -0,0 +1 @@
+<!doctype html><html><head>{% getBundle "html", "head" %}</head></html>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/bundle-in-layout/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/bundle-in-layout/index.liquid
new file mode 100755
index 0000000..2eb11db
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/bundle-in-layout/index.liquid
@@ -0,0 +1,6 @@
+---
+layout: layout.liquid
+---
+{% html "head" %}
+<link href="https://v1.opengraph.11ty.dev" rel="preconnect" crossorigin>
+{% endhtml %}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/bundle-render/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/bundle-render/index.liquid
new file mode 100755
index 0000000..40dd689
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/bundle-render/index.liquid
@@ -0,0 +1,9 @@
+{%- css -%}
+{%- renderTemplate "scss" -%}
+h1 { .test { color: red; } }
+{%- endrenderTemplate -%}
+{%- endcss -%}
+<!-- inbetween -->
+<style>
+{% getBundle "css" %}
+</style>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/delayed-bundle/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/delayed-bundle/eleventy.config.js
new file mode 100755
index 0000000..9da992a
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/delayed-bundle/eleventy.config.js
@@ -0,0 +1,19 @@
+import bundlePlugin from "../../../eleventy.bundle.js";
+
+export default function(eleventyConfig) {
+	eleventyConfig.addPlugin(bundlePlugin, {
+		force: true,
+		immediate: true, // immediate required for subsequent addBundle call
+	});
+
+	// delayed bundles happen *after* transforms
+	eleventyConfig.addBundle("svg", { delayed: true });
+
+	eleventyConfig.addTransform("adds-to-bundle", (content) => {
+		let { svg: svgBundle } = eleventyConfig.getBundleManagers();
+		svgBundle.addToPage("/", [ "this is svg" ]);
+		return content;
+	})
+
+	eleventyConfig.addTemplate('index.njk', `testing:{% getBundle "svg" %}`)
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/duplicate-addplugins/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/duplicate-addplugins/eleventy.config.js
new file mode 100755
index 0000000..c887578
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/duplicate-addplugins/eleventy.config.js
@@ -0,0 +1,7 @@
+import bundlePlugin from "../../../eleventy.bundle.js";
+
+export default function(eleventyConfig) {
+	eleventyConfig.addPlugin(bundlePlugin, {
+		bundles: false,
+	});
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-obj/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-obj/eleventy.config.js
new file mode 100755
index 0000000..794fb2f
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-obj/eleventy.config.js
@@ -0,0 +1,4 @@
+export default function(eleventyConfig) {
+	eleventyConfig.addBundle("css");
+	eleventyConfig.addBundle("js");
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-obj/template.11ty.mjs b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-obj/template.11ty.mjs
new file mode 100755
index 0000000..a4ba631
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-obj/template.11ty.mjs
@@ -0,0 +1,8 @@
+export const bundle = {
+	css: "/* CSS */",
+	js: "/* JS */"
+};
+
+export function render(data) {
+	return `<style>${this.getBundle("css")}</style><script>${this.getBundle("js")}</script>`;
+}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str-rename/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str-rename/eleventy.config.js
new file mode 100755
index 0000000..516efed
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str-rename/eleventy.config.js
@@ -0,0 +1,4 @@
+export default function(eleventyConfig) {
+	eleventyConfig.addBundle("css", { bundleExportKey: "css" });
+	eleventyConfig.addBundle("js", { bundleExportKey: "js" });
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str-rename/template.11ty.mjs b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str-rename/template.11ty.mjs
new file mode 100755
index 0000000..4f1fe2a
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str-rename/template.11ty.mjs
@@ -0,0 +1,6 @@
+export const js = "/* JS */";
+export const css = "/* CSS */";
+
+export function render(data) {
+	return `<style>${this.getBundle("css")}</style><script>${this.getBundle("js")}</script>`;
+}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str/eleventy.config.js
new file mode 100755
index 0000000..794fb2f
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str/eleventy.config.js
@@ -0,0 +1,4 @@
+export default function(eleventyConfig) {
+	eleventyConfig.addBundle("css");
+	eleventyConfig.addBundle("js");
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str/template.11ty.mjs b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str/template.11ty.mjs
new file mode 100755
index 0000000..7eb546a
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/export-key-str/template.11ty.mjs
@@ -0,0 +1,5 @@
+export const bundle = "/* Hello */";
+
+export function render(data) {
+	return `<style>${this.getBundle("css")}</style><script>${this.getBundle("js")}</script>`;
+}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/handlebars/index.hbs b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/handlebars/index.hbs
new file mode 100755
index 0000000..cf31e95
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/handlebars/index.hbs
@@ -0,0 +1,7 @@
+<style>{{ getBundle "css" }}</style>
+{{# css }}* { color: blue; }{{/ css }}
+<style>{{ getBundle "css" }}</style>
+{{# css }}* { color: blue; }{{/ css }}
+{{# css }}* { color: red; }{{/ css }}
+<style>{{ getBundle "css" }}</style>
+{{# css }}* { color: orange; }{{/ css }}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid-buckets-default/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid-buckets-default/index.liquid
new file mode 100755
index 0000000..8b5a7d3
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid-buckets-default/index.liquid
@@ -0,0 +1,7 @@
+{%- css "defer" %}* { color: blue; }{% endcss %}
+{%- css %}* { color: blue; }{% endcss %}
+{%- css "defer" %}* { color: red; }{% endcss %}
+{%- css %}* { color: orange; }{% endcss -%}
+<style>{% getBundle "css" "default" %}</style>
+<style>{% getBundle "css", "defer" %}</style>
+<style>{% getBundle "css", "no-match" %}</style>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid-buckets/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid-buckets/index.liquid
new file mode 100755
index 0000000..da85ecb
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid-buckets/index.liquid
@@ -0,0 +1,6 @@
+{%- css "defer" %}* { color: blue; }{% endcss %}
+{%- css %}* { color: blue; }{% endcss %}
+{%- css "defer" %}* { color: red; }{% endcss %}
+{%- css %}* { color: orange; }{% endcss -%}
+<style>{% getBundle "css" %}</style>
+<style>{% getBundle "css", "defer" %}</style>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid-js/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid-js/index.liquid
new file mode 100755
index 0000000..3c2c77e
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid-js/index.liquid
@@ -0,0 +1,7 @@
+<script>{% getBundle "js" %}</script>
+{%- js %}alert(1);{% endjs %}
+<script>{% getBundle "js" %}</script>
+{%- js %}alert(2);{% endjs %}
+{%- js %}alert(1);{% endjs %}
+<script>{% getBundle "js" %}</script>
+{%- js %}alert(3);{% endjs %}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid/index.liquid
new file mode 100755
index 0000000..1fe8b5f
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/liquid/index.liquid
@@ -0,0 +1,7 @@
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: blue; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: red; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: orange; }{% endcss %}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/markdown/index.md b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/markdown/index.md
new file mode 100755
index 0000000..1fe8b5f
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/markdown/index.md
@@ -0,0 +1,7 @@
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: blue; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: red; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: orange; }{% endcss %}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/no-bundles/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/no-bundles/index.liquid
new file mode 100755
index 0000000..4a18799
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/no-bundles/index.liquid
@@ -0,0 +1,15 @@
+---
+permalink: false
+---
+<!doctype html>
+<html lang="en">
+	<head>
+		<meta charset="utf-8">
+		<meta name="viewport" content="width=device-width, initial-scale=1.0">
+		<meta name="description" content="">
+		<title></title>
+	</head>
+	<body>
+
+	</body>
+</html>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/no-prune/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/no-prune/eleventy.config.js
new file mode 100755
index 0000000..f49ec76
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/no-prune/eleventy.config.js
@@ -0,0 +1,11 @@
+import bundlePlugin from "../../../eleventy.bundle.js";
+
+export default function(eleventyConfig) {
+	eleventyConfig.addPlugin(bundlePlugin, {
+		pruneEmptySelector: false,
+		force: true,
+	});
+
+	eleventyConfig.addTemplate('test.njk', `<div></div><style>{% getBundle "css" %}</style>
+{%- css %}            {% endcss %}`);
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/nunjucks-svg/index.njk b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/nunjucks-svg/index.njk
new file mode 100755
index 0000000..eb78b6b
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/nunjucks-svg/index.njk
@@ -0,0 +1,11 @@
+<svg width="0" height="0" aria-hidden="true" style="position: absolute;">
+	<defs>{%- getBundle "html", "svg" %}</defs>
+</svg>
+
+{%- html "svg" -%}
+<g id="icon-close-legacy"><path d="M8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 Z M10.44352,10.7233105 L10.4528296,10.7326201 L10.7326201,10.4528296 C11.0310632,10.1543865 11.0314986,9.66985171 10.7335912,9.37194437 L9.36507937,8.0034325 L10.7360526,6.63245928 C11.0344957,6.33401613 11.0349311,5.84948135 10.7370237,5.55157401 L10.448426,5.26297627 C10.1505186,4.96506892 9.66598387,4.96550426 9.36754072,5.26394741 L8.00589385,6.62559428 L6.63738198,5.25708241 C6.33947464,4.95917507 5.85493986,4.95961041 5.55649671,5.25805356 L5.26737991,5.54717036 C4.96893676,5.84561351 4.96850142,6.33014829 5.26640876,6.62805563 L6.62561103,7.9872579 L5.25463781,9.35823112 C4.95619466,9.65667427 4.95575932,10.141209 5.25366666,10.4391164 L5.5422644,10.7277141 C5.84017175,11.0256215 6.32470652,11.0251861 6.62314967,10.726743 L7.99412289,9.35576976 L9.36263476,10.7242816 C9.66054211,11.022189 10.1450769,11.0217536 10.44352,10.7233105 Z" /></g>
+{%- endhtml %}
+
+{%- html "svg" -%}
+<g id="icon-close-legacy"><path d="M8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 Z M10.44352,10.7233105 L10.4528296,10.7326201 L10.7326201,10.4528296 C11.0310632,10.1543865 11.0314986,9.66985171 10.7335912,9.37194437 L9.36507937,8.0034325 L10.7360526,6.63245928 C11.0344957,6.33401613 11.0349311,5.84948135 10.7370237,5.55157401 L10.448426,5.26297627 C10.1505186,4.96506892 9.66598387,4.96550426 9.36754072,5.26394741 L8.00589385,6.62559428 L6.63738198,5.25708241 C6.33947464,4.95917507 5.85493986,4.95961041 5.55649671,5.25805356 L5.26737991,5.54717036 C4.96893676,5.84561351 4.96850142,6.33014829 5.26640876,6.62805563 L6.62561103,7.9872579 L5.25463781,9.35823112 C4.95619466,9.65667427 4.95575932,10.141209 5.25366666,10.4391164 L5.5422644,10.7277141 C5.84017175,11.0256215 6.32470652,11.0251861 6.62314967,10.726743 L7.99412289,9.35576976 L9.36263476,10.7242816 C9.66054211,11.022189 10.1450769,11.0217536 10.44352,10.7233105 Z" /></g>
+{%- endhtml %}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/nunjucks/index.njk b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/nunjucks/index.njk
new file mode 100755
index 0000000..1fe8b5f
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/nunjucks/index.njk
@@ -0,0 +1,7 @@
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: blue; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: red; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: orange; }{% endcss %}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-default-multiple-times/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-default-multiple-times/eleventy.config.js
new file mode 100755
index 0000000..ba46123
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-default-multiple-times/eleventy.config.js
@@ -0,0 +1,7 @@
+import bundlePlugin from "../../../eleventy.bundle.js";
+
+export default function(eleventyConfig) {
+	eleventyConfig.addPlugin(bundlePlugin, {
+		hoistDuplicateBundlesFor: ["css", "js"],
+	});
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-default-multiple-times/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-default-multiple-times/index.liquid
new file mode 100755
index 0000000..0ea933b
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-default-multiple-times/index.liquid
@@ -0,0 +1,4 @@
+{%- css "default" %}* { color: blue; }{% endcss %}
+{%- comment %}nothing is hoisted if you output default multiple times{% endcomment %}
+<style>{% getBundle "css", "default" %}</style>
+<style>{% getBundle "css", "default" %}</style>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-same-bucket-multiple-times-nohoist/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-same-bucket-multiple-times-nohoist/index.liquid
new file mode 100755
index 0000000..cb5f366
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-same-bucket-multiple-times-nohoist/index.liquid
@@ -0,0 +1,7 @@
+{%- css "default" %}* { color: blue; }{% endcss %}
+{%- css "defer" %}* { color: blue; }{% endcss %}
+{%- css "defer" %}* { color: red; }{% endcss %}
+<style>{% getBundle "css", "default" %}</style>
+{%- comment %}bucket is hoisted to default if you output it multiple times{% endcomment %}
+<style>{% getBundle "css", "defer" %}</style>
+<style>{% getBundle "css", "defer" %}</style>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-same-bucket-multiple-times/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-same-bucket-multiple-times/eleventy.config.js
new file mode 100755
index 0000000..ba46123
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-same-bucket-multiple-times/eleventy.config.js
@@ -0,0 +1,7 @@
+import bundlePlugin from "../../../eleventy.bundle.js";
+
+export default function(eleventyConfig) {
+	eleventyConfig.addPlugin(bundlePlugin, {
+		hoistDuplicateBundlesFor: ["css", "js"],
+	});
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-same-bucket-multiple-times/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-same-bucket-multiple-times/index.liquid
new file mode 100755
index 0000000..cb5f366
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/output-same-bucket-multiple-times/index.liquid
@@ -0,0 +1,7 @@
+{%- css "default" %}* { color: blue; }{% endcss %}
+{%- css "defer" %}* { color: blue; }{% endcss %}
+{%- css "defer" %}* { color: red; }{% endcss %}
+<style>{% getBundle "css", "default" %}</style>
+{%- comment %}bucket is hoisted to default if you output it multiple times{% endcomment %}
+<style>{% getBundle "css", "defer" %}</style>
+<style>{% getBundle "css", "defer" %}</style>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/serverless-stubs/functions/test1/eleventy-serverless-map.json b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/serverless-stubs/functions/test1/eleventy-serverless-map.json
new file mode 100755
index 0000000..b0e9671
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/serverless-stubs/functions/test1/eleventy-serverless-map.json
@@ -0,0 +1,3 @@
+{
+  "/": "./test/stubs/serverless-stubs/test1.liquid"
+}
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/serverless-stubs/functions/test1/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/serverless-stubs/functions/test1/eleventy.config.js
new file mode 100755
index 0000000..f56ea86
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/serverless-stubs/functions/test1/eleventy.config.js
@@ -0,0 +1,5 @@
+import bundlePlugin from "../../../../../eleventy.bundle.js";
+
+export default function(eleventyConfig) {
+	eleventyConfig.addPlugin(bundlePlugin);
+};
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/serverless-stubs/test1.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/serverless-stubs/test1.liquid
new file mode 100755
index 0000000..1d155ae
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/serverless-stubs/test1.liquid
@@ -0,0 +1,6 @@
+---
+permalink:
+  test1: /
+---
+<style>{% getBundle "css" %}</style>
+{%- css %}* { color: blue; }{% endcss %}
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/eleventy.config.js
new file mode 100755
index 0000000..ba46123
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/eleventy.config.js
@@ -0,0 +1,7 @@
+import bundlePlugin from "../../../eleventy.bundle.js";
+
+export default function(eleventyConfig) {
+	eleventyConfig.addPlugin(bundlePlugin, {
+		hoistDuplicateBundlesFor: ["css", "js"],
+	});
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/file-and-file.njk b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/file-and-file.njk
new file mode 100755
index 0000000..f1655a1
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/file-and-file.njk
@@ -0,0 +1,4 @@
+{%- css "defer" %}* { color: blue; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+<link rel="stylesheet" href="{% getBundleFileUrl "css", "defer" %}">
+<link rel="stylesheet" href="{% getBundleFileUrl "css", "defer" %}">
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/get-and-file.njk b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/get-and-file.njk
new file mode 100755
index 0000000..f84af8b
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/get-and-file.njk
@@ -0,0 +1,4 @@
+{%- css "defer" %}* { color: blue; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+<style>{% getBundle "css", "defer" %}</style>
+<link rel="stylesheet" href="{% getBundleFileUrl "css", "defer" %}">
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/get-and-get.njk b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/get-and-get.njk
new file mode 100755
index 0000000..4c174bd
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-duplicates/get-and-get.njk
@@ -0,0 +1,4 @@
+{%- css "defer" %}* { color: blue; }{% endcss %}
+<style>{% getBundle "css" %}</style>
+<style>{% getBundle "css", "defer" %}</style>
+<style>{% getBundle "css", "defer" %}</style>
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-ordering/to-file-ordering.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-ordering/to-file-ordering.liquid
new file mode 100755
index 0000000..1eb4c1f
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-ordering/to-file-ordering.liquid
@@ -0,0 +1,4 @@
+{%- css %}* { color: blue; }{% endcss -%}
+<style>{% getBundle "css" %}</style>
+<link rel="stylesheet" href="{% getBundleFileUrl "css" %}">
+{%- css %}* { color: rebeccapurple; }{% endcss -%}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-write/to-file-write.njk b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-write/to-file-write.njk
new file mode 100755
index 0000000..543957b
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file-write/to-file-write.njk
@@ -0,0 +1,6 @@
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: red; }{% endcss %}
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: orange; }/* lololol2 */{% endcss -%}
+<style>{% getBundle "css" %}</style>
+<link rel="stylesheet" href="{% getBundleFileUrl "css" %}">
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file/index.njk b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file/index.njk
new file mode 100755
index 0000000..2f81e16
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/to-file/index.njk
@@ -0,0 +1,6 @@
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: red; }{% endcss %}
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: orange; }/* lololol */{% endcss -%}
+<style>{% getBundle "css" %}</style>
+<link rel="stylesheet" href="{% getBundleFileUrl "css" %}">
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms-on-type/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms-on-type/eleventy.config.js
new file mode 100755
index 0000000..c4f14d7
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms-on-type/eleventy.config.js
@@ -0,0 +1,20 @@
+import bundlePlugin from "../../../eleventy.bundle.js";
+import postcss from 'postcss';
+import postcssNested from 'postcss-nested';
+
+
+export default function(eleventyConfig) {
+	eleventyConfig.addPlugin(bundlePlugin, {
+		transforms: [async function(content) {
+			return new Promise(resolve => {
+				setTimeout(() => resolve(content), 50);
+			});
+		}, async function(content) {
+			if (this.type === "css") {
+				let result = await postcss([postcssNested]).process(content, { from: null, to: null })
+				return result.css;
+			}
+			return content;
+		}]
+	});
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms-on-type/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms-on-type/index.liquid
new file mode 100755
index 0000000..36a3705
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms-on-type/index.liquid
@@ -0,0 +1,9 @@
+<style>{% getBundle "css" %}</style>
+<script>{% getBundle "js" %}</script>
+
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: red; }{% endcss %}
+{%- css %}#id { * { color: orange; } }{% endcss %}
+
+{%- js %}console.log("bundle me up"){% endjs %}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms/eleventy.config.js b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms/eleventy.config.js
new file mode 100755
index 0000000..a0ad779
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms/eleventy.config.js
@@ -0,0 +1,17 @@
+import bundlePlugin from "../../../eleventy.bundle.js";
+import postcss from 'postcss';
+import postcssNested from 'postcss-nested';
+
+
+export default function(eleventyConfig) {
+	eleventyConfig.addPlugin(bundlePlugin, {
+		transforms: [async function(content) {
+			return new Promise(resolve => {
+				setTimeout(() => resolve(content), 50);
+			});
+		}, async function(content) {
+			let result = await postcss([postcssNested]).process(content, { from: null, to: null })
+			return result.css;
+		}]
+	});
+};
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms/index.liquid b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms/index.liquid
new file mode 100755
index 0000000..e6aef56
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/stubs/use-transforms/index.liquid
@@ -0,0 +1,6 @@
+<style>{% getBundle "css" %}</style>
+
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: blue; }{% endcss %}
+{%- css %}* { color: red; }{% endcss %}
+{%- css %}#id { * { color: orange; } }{% endcss %}
\ No newline at end of file
diff --git a/node_modules/@11ty/eleventy-plugin-bundle/test/test.js b/node_modules/@11ty/eleventy-plugin-bundle/test/test.js
new file mode 100755
index 0000000..11792d0
--- /dev/null
+++ b/node_modules/@11ty/eleventy-plugin-bundle/test/test.js
@@ -0,0 +1,455 @@
+import test from "ava";
+import fs from "fs";
+import Eleventy, { RenderPlugin } from "@11ty/eleventy";
+import * as sass from "sass";
+import bundlePlugin from "../eleventy.bundle.js";
+
+// Special testing notes regarding overriding the bundled-with-core Bundle Plugin and using the Bundle Plugin from this repo:
+// Options: use a `configPath` with `force: true`
+// Use `eleventy.beforeConfig` event with `config` callback (read more below)
+
+// Configuration order of execution:
+// 1. `config` callback
+// 2. `defaultConfig.js` file from core repo
+// 3. `configPath` file
+
+// eleventy.beforeConfig event approach:
+// If you want to use a `config` callback to overwrite the built-in Bundle Plugin, use this pattern instead:
+// config: function(eleventyConfig) {
+// 	eleventyConfig.on("eleventy.beforeConfig", () => {
+// 		eleventyConfig.addPlugin(bundlePlugin, {
+// 			immediate: true,
+// 			force: true,
+// 		});
+// 	});
+// }
+
+function normalize(str) {
+	if(typeof str !== "string") {
+		throw new Error("Could not find content: " + str);
+	}
+  return str.trim().replace(/\r\n/g, "\n");
+}
+
+test("CSS (Nunjucks)", async t => {
+	let elev = new Eleventy("test/stubs/nunjucks/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }</style>
+<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }</style>
+<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }</style>`)
+});
+
+test("CSS (Liquid)", async t => {
+	let elev = new Eleventy("test/stubs/liquid/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }</style>
+<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }</style>
+<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }</style>`)
+});
+
+test("CSS (Markdown)", async t => {
+	let elev = new Eleventy("test/stubs/markdown/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }</style>
+<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }</style>
+<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }</style>`)
+});
+
+test("SVG", async t => {
+	let elev = new Eleventy("test/stubs/nunjucks-svg/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<svg width="0" height="0" aria-hidden="true" style="position: absolute;">
+	<defs><g id="icon-close-legacy"><path d="M8,15 C4.13400675,15 1,11.8659932 1,8 C1,4.13400675 4.13400675,1 8,1 C11.8659932,1 15,4.13400675 15,8 C15,11.8659932 11.8659932,15 8,15 Z M10.44352,10.7233105 L10.4528296,10.7326201 L10.7326201,10.4528296 C11.0310632,10.1543865 11.0314986,9.66985171 10.7335912,9.37194437 L9.36507937,8.0034325 L10.7360526,6.63245928 C11.0344957,6.33401613 11.0349311,5.84948135 10.7370237,5.55157401 L10.448426,5.26297627 C10.1505186,4.96506892 9.66598387,4.96550426 9.36754072,5.26394741 L8.00589385,6.62559428 L6.63738198,5.25708241 C6.33947464,4.95917507 5.85493986,4.95961041 5.55649671,5.25805356 L5.26737991,5.54717036 C4.96893676,5.84561351 4.96850142,6.33014829 5.26640876,6.62805563 L6.62561103,7.9872579 L5.25463781,9.35823112 C4.95619466,9.65667427 4.95575932,10.141209 5.25366666,10.4391164 L5.5422644,10.7277141 C5.84017175,11.0256215 6.32470652,11.0251861 6.62314967,10.726743 L7.99412289,9.35576976 L9.36263476,10.7242816 C9.66054211,11.022189 10.1450769,11.0217536 10.44352,10.7233105 Z"></path></g></defs>
+</svg>`)
+});
+
+test("JS", async t => {
+	let elev = new Eleventy("test/stubs/liquid-js/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<script>alert(1);
+alert(2);
+alert(3);</script>
+<script>alert(1);
+alert(2);
+alert(3);</script>
+<script>alert(1);
+alert(2);
+alert(3);</script>`)
+});
+
+test("CSS, two buckets", async t => {
+	let elev = new Eleventy("test/stubs/liquid-buckets/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: orange; }</style>
+<style>* { color: blue; }
+* { color: red; }</style>`)
+});
+
+test("CSS, two buckets, explicit `default`", async t => {
+	let elev = new Eleventy("test/stubs/liquid-buckets-default/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: orange; }</style>
+<style>* { color: blue; }
+* { color: red; }</style>`)
+});
+
+test("CSS, get two buckets at once", async t => {
+	let elev = new Eleventy("test/stubs/buckets-get-multiple/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: orange; }
+* { color: red; }</style>`); // note that blue is only listed once, we de-dupe entries across buckets
+});
+
+test("CSS, get two buckets at once, reverse order", async t => {
+	let elev = new Eleventy("test/stubs/buckets-ordering/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }</style>`); // note that blue is only listed once, we de-dupe entries across buckets
+});
+
+test("CSS, get two buckets at once (comma separated list)", async t => {
+	let elev = new Eleventy("test/stubs/buckets-get-multiple-comma-sep/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: orange; }
+* { color: red; }</style>`); // note that blue is only listed once, we de-dupe entries across buckets
+});
+
+test("toFile Filter (no writes)", async t => {
+	let elev = new Eleventy("test/stubs/to-file/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }/* lololol */</style>
+<link rel="stylesheet" href="/bundle/AZBTWWtF0t.css">`); // note that blue is only listed once, we de-dupe entries across buckets
+
+	// does *not* write to the file system because of `toJSON` usage above.
+	t.falsy(fs.existsSync("./_site/bundle/AZBTWWtF0t.css"))
+});
+
+test("toFile Filter (write files)", async t => {
+	let elev = new Eleventy("test/stubs/to-file-write/", undefined, {
+		configPath: "eleventy.bundle.js",
+		config: function(eleventyConfig) {
+			eleventyConfig.setQuietMode(true);
+		}
+	});
+
+	await elev.write();
+
+	t.is(normalize(fs.readFileSync("_site/to-file-write/index.html", "utf8")), `<style>* { color: blue; }
+* { color: red; }
+* { color: orange; }/* lololol2 */</style>
+<link rel="stylesheet" href="/bundle/Es4dSlOfrv.css">`); // note that blue is only listed once, we de-dupe entries across buckets
+
+	// does write to the file system because of `write` usage above.
+	t.is(normalize(fs.readFileSync("_site/bundle/Es4dSlOfrv.css", "utf8")), `* { color: blue; }
+* { color: red; }
+* { color: orange; }/* lololol2 */`);
+
+	fs.unlinkSync("_site/to-file-write/index.html");
+	fs.unlinkSync("_site/bundle/Es4dSlOfrv.css");
+
+	t.false(fs.existsSync("_site/to-file-write/index.html"));
+	t.false(fs.existsSync("_site/bundle/Es4dSlOfrv.css"));
+});
+
+test("toFile Filter (write files, out of order)", async t => {
+	let elev = new Eleventy("test/stubs/to-file-ordering/", undefined, {
+		configPath: "eleventy.bundle.js",
+		config: function(eleventyConfig) {
+			eleventyConfig.setQuietMode(true);
+		}
+	});
+
+	await elev.write();
+
+	t.is(normalize(fs.readFileSync("./_site/to-file-ordering/index.html", "utf8")), `<style>* { color: blue; }
+* { color: rebeccapurple; }</style>
+<link rel="stylesheet" href="/bundle/6_wo_c5eqX.css">`); // note that blue is only listed once, we de-dupe entries across buckets
+
+	// does write to the file system because of `write` usage above.
+	t.is(normalize(fs.readFileSync("./_site/bundle/6_wo_c5eqX.css", "utf8")), `* { color: blue; }
+* { color: rebeccapurple; }`);
+
+	fs.unlinkSync("./_site/to-file-ordering/index.html");
+	fs.unlinkSync("./_site/bundle/6_wo_c5eqX.css");
+
+	t.false(fs.existsSync("./_site/to-file-ordering/index.html"));
+	t.false(fs.existsSync("./_site/bundle/6_wo_c5eqX.css"));
+});
+
+test("Bundle in Layout file", async t => {
+	let elev = new Eleventy("test/stubs/bundle-in-layout/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<!doctype html><html><head><link href="https://v1.opengraph.11ty.dev" rel="preconnect" crossorigin=""></head></html>`);
+});
+
+test("Bundle with render plugin", async t => {
+	let elev = new Eleventy("test/stubs/bundle-render/", undefined, {
+		configPath: "eleventy.bundle.js",
+		config: function(eleventyConfig) {
+			eleventyConfig.addPlugin(RenderPlugin);
+
+			eleventyConfig.addExtension("scss", {
+				outputFileExtension: "css",
+
+				compile: async function(inputContent) {
+					let result = sass.compileString(inputContent);
+
+					// This is the render function, `data` is the full data cascade
+					return async (data) => {
+						return result.css;
+					};
+				}
+			});
+		}
+	});
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<!-- inbetween -->
+<style>
+h1 .test {
+  color: red;
+}
+</style>`);
+});
+
+test("No bundling", async t => {
+	let elev = new Eleventy("test/stubs/no-bundles/", "_site", { configPath: "eleventy.bundle.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<!doctype html>
+<html lang="en">
+	<head>
+		<meta charset="utf-8">
+		<meta name="viewport" content="width=device-width, initial-scale=1.0">
+		<meta name="description" content="">
+		<title></title>
+	</head>
+	<body>
+
+	</body>
+</html>`);
+});
+
+test("Use Transforms", async t => {
+	let elev = new Eleventy("test/stubs/use-transforms/", undefined, {
+		configPath: "test/stubs/use-transforms/eleventy.config.js"
+	});
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: red; }
+#id * { color: orange; }</style>`);
+});
+
+test("Use Transforms on specific bundle type", async t => {
+	let elev = new Eleventy("test/stubs/use-transforms-on-type/", undefined, {
+		configPath: "test/stubs/use-transforms-on-type/eleventy.config.js"
+	});
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: red; }
+#id * { color: orange; }</style>
+<script>console.log("bundle me up")</script>`);
+});
+
+test("Output `defer` bucket multiple times (hoisting disabled)", async t => {
+	let elev = new Eleventy("test/stubs/output-same-bucket-multiple-times-nohoist/", undefined, {
+		configPath: "eleventy.bundle.js"
+	});
+
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }</style>
+<style>* { color: blue; }
+* { color: red; }</style>
+<style>* { color: blue; }
+* { color: red; }</style>`);
+});
+
+test("Output `defer` bucket multiple times (does hoisting)", async t => {
+	let elev = new Eleventy("test/stubs/output-same-bucket-multiple-times/", undefined, {
+		configPath: "test/stubs/output-same-bucket-multiple-times/eleventy.config.js"
+	});
+
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }
+* { color: red; }</style>`);
+});
+
+test("Output `default` bucket multiple times (no hoisting)", async t => {
+	let elev = new Eleventy("test/stubs/output-default-multiple-times/", undefined, {
+		configPath: "test/stubs/output-default-multiple-times/eleventy.config.js"
+	});
+
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>* { color: blue; }</style>
+<style>* { color: blue; }</style>`);
+});
+
+test("`defer` hoisting", async t => {
+	let elev = new Eleventy("test/stubs/to-file-duplicates/", undefined, {
+		configPath: "test/stubs/to-file-duplicates/eleventy.config.js"
+	});
+
+	let results = await elev.toJSON();
+	results.sort((a, b) => {
+		if(a.inputPath > b.inputPath) {
+			return 1;
+		}
+		return -1;
+	})
+
+	t.deepEqual(normalize(results[0].content), `<link rel="stylesheet" href="/bundle/S_XQgJiZBL.css">
+<link rel="stylesheet" href="/bundle/S_XQgJiZBL.css">`);
+
+	t.deepEqual(normalize(results[1].content), `<style>* { color: blue; }</style>`);
+
+	t.deepEqual(normalize(results[2].content), `<style>* { color: blue; }</style>`);
+});
+
+test("Bundle export key as string (11ty.js)", async t => {
+	let elev = new Eleventy("test/stubs/export-key-str/", "_site", { configPath: "test/stubs/export-key-str/eleventy.config.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>/* Hello */</style><script>/* Hello */</script>`)
+});
+
+test("Bundle export key as object (11ty.js)", async t => {
+	let elev = new Eleventy("test/stubs/export-key-obj/", "_site", { configPath: "test/stubs/export-key-obj/eleventy.config.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>/* CSS */</style><script>/* JS */</script>`)
+});
+
+test("Bundle export key as string, using separate bundleExportKey’s (11ty.js)", async t => {
+	let elev = new Eleventy("test/stubs/export-key-str-rename/", "_site", { configPath: "test/stubs/export-key-str-rename/eleventy.config.js" });
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<style>/* CSS */</style><script>/* JS */</script>`)
+});
+
+test("Empty CSS bundle (trimmed) removes empty <style> tag", async t => {
+	let elev = new Eleventy("test/stubs-virtual/", "_site", {
+		config: function(eleventyConfig) {
+			eleventyConfig.addPlugin(bundlePlugin);
+
+			eleventyConfig.addTemplate('test.njk', `<div></div><style>{% getBundle "css" %}</style>
+{%- css %}            {% endcss %}`)
+		}
+	});
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<div></div>`)
+});
+
+test("Empty JS bundle (trimmed) removes empty <script> tag", async t => {
+	let elev = new Eleventy("test/stubs-virtual/", "_site", {
+		config: function(eleventyConfig) {
+			eleventyConfig.addPlugin(bundlePlugin);
+
+			eleventyConfig.addTemplate('test.njk', `<div></div><script>{% getBundle "css" %}</script>
+{%- js %}            {% endjs %}`)
+		}
+	});
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<div></div>`)
+});
+
+test("Empty CSS bundle (trimmed) removes empty <link rel=stylesheet> tag", async t => {
+	let elev = new Eleventy("test/stubs-virtual/", "_site", {
+		config: function(eleventyConfig) {
+			eleventyConfig.addPlugin(bundlePlugin);
+
+			eleventyConfig.addTemplate('test.njk', `<div></div><link rel="stylesheet" href="{% getBundleFileUrl "css" %}">
+{%- css %}            {% endcss %}`)
+		}
+	});
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<div></div>`)
+});
+
+// TODO this requires `htmlTransformer.remove` which is core v3.0.1-alpha.4+
+test.skip("Empty CSS bundle (trimmed) does *not* remove empty <style> tag (unskip after Eleventy v3.0.1+)", async t => {
+	let elev = new Eleventy("test/stubs-virtual/", "_site", {
+		// See testing note at top of this file
+		configPath: "test/stubs/no-prune/eleventy.config.js",
+	});
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<div></div><style></style>`)
+});
+
+// TODO this requires `htmlTransformer.remove` which is core v3.0.1-alpha.4+
+test.skip("Empty CSS bundle (trimmed) does *not* remove empty <style eleventy:keep> tag (unskip after Eleventy v3.0.1+)", async t => {
+	let elev = new Eleventy("test/stubs-virtual/", "_site", {
+		config: function(eleventyConfig) {
+			eleventyConfig.addPlugin(bundlePlugin);
+
+			eleventyConfig.addTemplate('test.njk', `<div></div><style eleventy:keep>{% getBundle "css" %}</style>
+{%- css %}            {% endcss %}`)
+		}
+	});
+
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<div></div><style></style>`)
+});
+
+// This one requires a new Eleventy v3.0.0-alpha.20 or -beta.2 release, per the `enabled` option on plugins to HtmlTransformer
+test("<style> is left as-is (not removed) because there are *no* bundles", async t => {
+	let elev = new Eleventy("test/stubs-virtual/", "_site", {
+		config: function(eleventyConfig) {
+			eleventyConfig.addPlugin(bundlePlugin, {
+				bundles: false,
+			});
+
+			eleventyConfig.addTemplate('test.njk', `<div></div><style></style>`)
+		}
+	});
+
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<div></div><style></style>`)
+});
+
+test("Delayed Bundle can be modified by transforms", async t => {
+	let elev = new Eleventy("test/stubs-virtual/", "_site", {
+		// See testing note at top of this file
+		configPath: "test/stubs/delayed-bundle/eleventy.config.js",
+	});
+
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `testing:this is svg`)
+});
+
+test("config and configPath handles multiple addPlugin calls just fine", async t => {
+	let elev = new Eleventy("test/stubs-virtual/", "_site", {
+		// See testing note at top of this file
+		configPath: "test/stubs/duplicate-addplugins/eleventy.config.js",
+		config: function(eleventyConfig) {
+			eleventyConfig.addPlugin(bundlePlugin, {
+				bundles: false,
+			});
+
+			eleventyConfig.addTemplate('test.njk', `<div></div>`)
+		}
+	});
+
+	let results = await elev.toJSON();
+	t.deepEqual(normalize(results[0].content), `<div></div>`)
+});
